FROM node:20-alpine

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    bash \
    python3 \
    make \
    g++ \
    postgresql-client

# Install Bun for fast package management
RUN curl -fsSL https://bun.sh/install | bash
ENV PATH="/root/.bun/bin:$PATH"

# Create app directory
WORKDIR /workspace

# Create directories for agent projects
RUN mkdir -p /workspace/components \
    /workspace/functions \
    /workspace/database \
    /workspace/shared \
    /workspace/output

# Install global development tools
RUN bun add -g \
    typescript \
    @types/node \
    drizzle-kit \
    drizzle-orm \
    vite \
    @vitejs/plugin-react \
    eslint \
    prettier

# Create package.json for the workspace
COPY <<EOF /workspace/package.json
{
  "name": "agent-workspace",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev:component": "vite --config vite.component.config.ts",
    "build:component": "vite build --config vite.component.config.ts",
    "dev:function": "bun run --hot functions/index.ts",
    "build:function": "bun build functions/index.ts --outdir output/function",
    "db:generate": "drizzle-kit generate",
    "db:migrate": "drizzle-kit migrate",
    "db:studio": "drizzle-kit studio",
    "typecheck": "tsc --noEmit",
    "lint": "eslint . --ext ts,tsx",
    "format": "prettier --write ."
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "drizzle-orm": "^0.44.4",
    "postgres": "^3.4.7",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "vite": "^5.0.0",
    "@vitejs/plugin-react": "^4.0.0",
    "drizzle-kit": "^0.31.4",
    "eslint": "^8.0.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "prettier": "^3.0.0"
  }
}
EOF

# Create TypeScript config
COPY <<EOF /workspace/tsconfig.json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./shared/*"],
      "@components/*": ["./components/*"],
      "@functions/*": ["./functions/*"]
    }
  },
  "include": [
    "components/**/*",
    "functions/**/*",
    "shared/**/*",
    "database/**/*"
  ],
  "references": [
    { "path": "./tsconfig.node.json" }
  ]
}
EOF

# Create Vite config for React components
COPY <<EOF /workspace/vite.component.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'

export default defineConfig({
  plugins: [react()],
  root: './components',
  build: {
    outDir: '../output/component',
    lib: {
      entry: resolve(__dirname, 'components/index.tsx'),
      name: 'Component',
      fileName: 'component',
      formats: ['es', 'cjs']
    },
    rollupOptions: {
      external: ['react', 'react-dom'],
      output: {
        globals: {
          react: 'React',
          'react-dom': 'ReactDOM'
        }
      }
    }
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, './shared'),
      '@components': resolve(__dirname, './components'),
      '@functions': resolve(__dirname, './functions')
    }
  }
})
EOF

# Create Drizzle config
COPY <<EOF /workspace/drizzle.config.ts
import type { Config } from "drizzle-kit";

export default {
  schema: "./database/schema.ts",
  out: "./database/migrations",
  driver: "pg",
  dbCredentials: {
    connectionString: process.env.DATABASE_URL || "postgresql://localhost:5432/agent_db",
  },
} satisfies Config;
EOF

# Create basic directory structure with template files
COPY <<EOF /workspace/components/index.tsx
import React from 'react';

export interface ComponentProps {
  // Props will be defined by the agent based on requirements
}

const Component: React.FC<ComponentProps> = (props) => {
  return (
    <div>
      {/* Component implementation will be generated by agent */}
      <h1>Agent-Generated Component</h1>
    </div>
  );
};

export default Component;
EOF

COPY <<EOF /workspace/functions/index.ts
// Serverless function template - will be populated by agent
export interface FunctionInput {
  // Input type will be defined by agent
}

export interface FunctionOutput {
  // Output type will be defined by agent
}

export default async function handler(input: FunctionInput): Promise<FunctionOutput> {
  // Function implementation will be generated by agent
  return {
    success: true,
    message: "Agent-generated function executed successfully"
  } as FunctionOutput;
}
EOF

COPY <<EOF /workspace/database/schema.ts
import { pgTable, text, timestamp, uuid, jsonb } from 'drizzle-orm/pg-core';

// Example schema - agents will modify this based on requirements
export const components = pgTable('components', {
  id: uuid('id').primaryKey().defaultRandom(),
  name: text('name').notNull(),
  props: jsonb('props'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
});
EOF

COPY <<EOF /workspace/shared/types.ts
// Shared types between components and functions
export interface BaseProps {
  className?: string;
  children?: React.ReactNode;
}

export interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  error?: string;
}
EOF

# Install dependencies
RUN cd /workspace && bun install

# Create a non-root user for security
RUN addgroup -g 1001 -S agent && \
    adduser -S agent -u 1001 -G agent

# Change ownership of workspace to agent user
RUN chown -R agent:agent /workspace

# Switch to agent user
USER agent

# Set working directory
WORKDIR /workspace

# Expose ports for development servers
EXPOSE 5173 3001

# Default command
CMD ["bash"]
