# =============================================================================
# Acacia User-Extensible App Platform - Environment Configuration
# =============================================================================

# -----------------------------------------------------------------------------
# Database Configuration
# -----------------------------------------------------------------------------

# Database type: 'postgresql' or 'sqlite'
DATABASE_TYPE=postgresql

# PostgreSQL Configuration (when DATABASE_TYPE=postgresql)
# Full connection string format:
# DATABASE_URL=postgresql://username:password@host:port/database?sslmode=require
DATABASE_URL=postgresql://acacia:acacia_password@localhost:5432/acacia

# OR individual PostgreSQL components:
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_USER=acacia
# POSTGRES_PASSWORD=acacia_password
# POSTGRES_DATABASE=acacia
# POSTGRES_SSL=false

# SQLite Configuration (when DATABASE_TYPE=sqlite)
# File path for SQLite database (relative or absolute)
# SQLITE_PATH=./acacia.db
# OR use DATABASE_URL format:
# DATABASE_URL=sqlite://./acacia.db

# -----------------------------------------------------------------------------
# OpenRouter API Configuration (Required for LLM agents)
# -----------------------------------------------------------------------------

# Your OpenRouter API key - get it from https://openrouter.ai/
OPENROUTER_API_KEY=your_openrouter_api_key_here

# Site information for OpenRouter headers
YOUR_SITE_URL=http://localhost:3000
YOUR_SITE_NAME=Acacia User-Extensible Platform

# -----------------------------------------------------------------------------
# Server Configuration
# -----------------------------------------------------------------------------

# Port for Acacia platform
PORT=3100

# Node environment
NODE_ENV=development

# Host application configuration
MAIN_APP_URL=http://localhost:3000
HOST_PROJECT_PATH=./host-project

# -----------------------------------------------------------------------------
# Extension System Configuration
# -----------------------------------------------------------------------------

# App identifier for extensions
APP_ID=my-awesome-app

# Maximum extensions per user
MAX_EXTENSIONS_PER_USER=50

# Function execution limits
FUNCTION_TIMEOUT=30000
FUNCTION_MEMORY_LIMIT=512

# Component rendering limits
COMPONENT_RENDER_TIMEOUT=5000

# Extension data storage limits (MB)
MAX_EXTENSION_DATA_SIZE=100

# -----------------------------------------------------------------------------
# Security Configuration
# -----------------------------------------------------------------------------

# JWT secret for user authentication (if using built-in auth)
JWT_SECRET=your-super-secure-jwt-secret-here

# CORS settings
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Rate limiting
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX_REQUESTS=100

# Trusted domains for external requests
TRUSTED_DOMAINS=api.example.com,hooks.example.com

# -----------------------------------------------------------------------------
# Development Configuration
# -----------------------------------------------------------------------------

# Enable debug logging
DEBUG=false

# Enable function execution logging
LOG_FUNCTION_EXECUTIONS=true

# Enable component render logging
LOG_COMPONENT_RENDERS=true

# Development workspace path
DEV_WORKSPACE_PATH=./dev-workspaces

# Hot reload for extensions (development only)
HOT_RELOAD_EXTENSIONS=true

# -----------------------------------------------------------------------------
# Production Configuration
# -----------------------------------------------------------------------------

# Redis URL for caching and sessions (optional)
# REDIS_URL=redis://localhost:6379

# S3 configuration for file storage (optional)
# AWS_ACCESS_KEY_ID=your_access_key
# AWS_SECRET_ACCESS_KEY=your_secret_key
# AWS_S3_BUCKET=acacia-extensions
# AWS_REGION=us-east-1

# CDN URL for serving components (optional)
# CDN_URL=https://cdn.example.com

# Monitoring and logging
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# LOG_LEVEL=info

# Health check endpoint
HEALTH_CHECK_ENABLED=true

# Metrics collection
METRICS_ENABLED=false

# -----------------------------------------------------------------------------
# Database Migration Settings
# -----------------------------------------------------------------------------

# Run migrations on startup
AUTO_MIGRATE=true

# Migration directory
MIGRATION_PATH=./db/migrations

# -----------------------------------------------------------------------------
# Extension Marketplace Configuration
# -----------------------------------------------------------------------------

# Enable public extension marketplace
MARKETPLACE_ENABLED=true

# Extension review system
EXTENSION_REVIEWS_ENABLED=true

# Extension analytics
EXTENSION_ANALYTICS_ENABLED=true

# Webhook URL for extension installations
# EXTENSION_WEBHOOK_URL=https://your-app.com/webhooks/extension-installed

# -----------------------------------------------------------------------------
# Docker Configuration (for containerized deployment)
# -----------------------------------------------------------------------------

# When running in Docker, use these instead:
# DATABASE_URL=postgresql://acacia:acacia_password@postgres:5432/acacia
# REDIS_URL=redis://redis:6379

# Docker network configuration
# DOCKER_NETWORK=acacia-network

# -----------------------------------------------------------------------------
# Example Configurations
# -----------------------------------------------------------------------------

# Example 1: Local development with PostgreSQL
# DATABASE_TYPE=postgresql
# DATABASE_URL=postgresql://postgres:password@localhost:5432/acacia_dev
# OPENROUTER_API_KEY=sk-or-v1-your-key-here
# NODE_ENV=development
# PORT=3100

# Example 2: Local development with SQLite
# DATABASE_TYPE=sqlite
# DATABASE_URL=sqlite://./acacia-dev.db
# OPENROUTER_API_KEY=sk-or-v1-your-key-here
# NODE_ENV=development
# PORT=3100

# Example 3: Production with PostgreSQL and Redis
# DATABASE_TYPE=postgresql
# DATABASE_URL=postgresql://user:pass@db-host:5432/acacia_prod?sslmode=require
# REDIS_URL=redis://redis-host:6379
# OPENROUTER_API_KEY=sk-or-v1-your-production-key-here
# NODE_ENV=production
# PORT=3100
# LOG_LEVEL=warn
# METRICS_ENABLED=true

# -----------------------------------------------------------------------------
# Quick Setup Commands
# -----------------------------------------------------------------------------

# 1. Copy this file to .env:
#    cp .env.example .env

# 2. For PostgreSQL setup:
#    docker run --name acacia-postgres -e POSTGRES_PASSWORD=acacia_password -e POSTGRES_DB=acacia -p 5432:5432 -d postgres:15

# 3. For Redis (optional):
#    docker run --name acacia-redis -p 6379:6379 -d redis:7-alpine

# 4. Install and start:
#    bun install
#    bun run dev
